// MARK: - Missing stdlib API

extension Unicode {
  /// Character script types.
  ///
  /// Note this includes the "meta" script type "Katakana_Or_Hiragana", which
  /// isn't defined by https://www.unicode.org/Public/UCD/latest/ucd/Scripts.txt,
  /// but is defined by https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt.
  /// We may want to split it out, as it's the only case that is a union of
  /// other script types.
  public enum Script: String, Hashable {
    case adlam = "Adlam"
    case ahom = "Ahom"
    case anatolianHieroglyphs = "Anatolian_Hieroglyphs"
    case arabic = "Arabic"
    case armenian = "Armenian"
    case avestan = "Avestan"
    case balinese = "Balinese"
    case bamum = "Bamum"
    case bassaVah = "Bassa_Vah"
    case batak = "Batak"
    case bengali = "Bengali"
    case bhaiksuki = "Bhaiksuki"
    case bopomofo = "Bopomofo"
    case brahmi = "Brahmi"
    case braille = "Braille"
    case buginese = "Buginese"
    case buhid = "Buhid"
    case canadianAboriginal = "Canadian_Aboriginal"
    case carian = "Carian"
    case caucasianAlbanian = "Caucasian_Albanian"
    case chakma = "Chakma"
    case cham = "Cham"
    case cherokee = "Cherokee"
    case chorasmian = "Chorasmian"
    case common = "Common"
    case coptic = "Coptic"
    case cuneiform = "Cuneiform"
    case cypriot = "Cypriot"
    case cyrillic = "Cyrillic"
    case cyproMinoan = "Cypro_Minoan"
    case deseret = "Deseret"
    case devanagari = "Devanagari"
    case divesAkuru = "Dives_Akuru"
    case dogra = "Dogra"
    case duployan = "Duployan"
    case egyptianHieroglyphs = "Egyptian_Hieroglyphs"
    case elbasan = "Elbasan"
    case elymaic = "Elymaic"
    case ethiopic = "Ethiopic"
    case georgian = "Georgian"
    case glagolitic = "Glagolitic"
    case gothic = "Gothic"
    case grantha = "Grantha"
    case greek = "Greek"
    case gujarati = "Gujarati"
    case gunjalaGondi = "Gunjala_Gondi"
    case gurmukhi = "Gurmukhi"
    case han = "Han"
    case hangul = "Hangul"
    case hanifiRohingya = "Hanifi_Rohingya"
    case hanunoo = "Hanunoo"
    case hatran = "Hatran"
    case hebrew = "Hebrew"
    case hiragana = "Hiragana"
    case imperialAramaic = "Imperial_Aramaic"
    case inherited = "Inherited"
    case inscriptionalPahlavi = "Inscriptional_Pahlavi"
    case inscriptionalParthian = "Inscriptional_Parthian"
    case javanese = "Javanese"
    case kaithi = "Kaithi"
    case kannada = "Kannada"
    case katakana = "Katakana"
    case katakanaOrHiragana = "Katakana_Or_Hiragana"
    case kayahLi = "Kayah_Li"
    case kharoshthi = "Kharoshthi"
    case khitanSmallScript = "Khitan_Small_Script"
    case khmer = "Khmer"
    case khojki = "Khojki"
    case khudawadi = "Khudawadi"
    case lao = "Lao"
    case latin = "Latin"
    case lepcha = "Lepcha"
    case limbu = "Limbu"
    case linearA = "Linear_A"
    case linearB = "Linear_B"
    case lisu = "Lisu"
    case lycian = "Lycian"
    case lydian = "Lydian"
    case mahajani = "Mahajani"
    case makasar = "Makasar"
    case malayalam = "Malayalam"
    case mandaic = "Mandaic"
    case manichaean = "Manichaean"
    case marchen = "Marchen"
    case masaramGondi = "Masaram_Gondi"
    case medefaidrin = "Medefaidrin"
    case meeteiMayek = "Meetei_Mayek"
    case mendeKikakui = "Mende_Kikakui"
    case meroiticCursive = "Meroitic_Cursive"
    case meroiticHieroglyphs = "Meroitic_Hieroglyphs"
    case miao = "Miao"
    case modi = "Modi"
    case mongolian = "Mongolian"
    case mro = "Mro"
    case multani = "Multani"
    case myanmar = "Myanmar"
    case nabataean = "Nabataean"
    case nandinagari = "Nandinagari"
    case newa = "Newa"
    case newTaiLue = "New_Tai_Lue"
    case nko = "Nko"
    case nushu = "Nushu"
    case nyiakengPuachueHmong = "Nyiakeng_Puachue_Hmong"
    case ogham = "Ogham"
    case olChiki = "Ol_Chiki"
    case oldHungarian = "Old_Hungarian"
    case oldItalic = "Old_Italic"
    case oldNorthArabian = "Old_North_Arabian"
    case oldPermic = "Old_Permic"
    case oldPersian = "Old_Persian"
    case oldSogdian = "Old_Sogdian"
    case oldSouthArabian = "Old_South_Arabian"
    case oldTurkic = "Old_Turkic"
    case oldUyghur = "Old_Uyghur"
    case oriya = "Oriya"
    case osage = "Osage"
    case osmanya = "Osmanya"
    case pahawhHmong = "Pahawh_Hmong"
    case palmyrene = "Palmyrene"
    case pauCinHau = "Pau_Cin_Hau"
    case phagsPa = "Phags_Pa"
    case phoenician = "Phoenician"
    case psalterPahlavi = "Psalter_Pahlavi"
    case rejang = "Rejang"
    case runic = "Runic"
    case samaritan = "Samaritan"
    case saurashtra = "Saurashtra"
    case sharada = "Sharada"
    case shavian = "Shavian"
    case siddham = "Siddham"
    case signWriting = "SignWriting"
    case sinhala = "Sinhala"
    case sogdian = "Sogdian"
    case soraSompeng = "Sora_Sompeng"
    case soyombo = "Soyombo"
    case sundanese = "Sundanese"
    case sylotiNagri = "Syloti_Nagri"
    case syriac = "Syriac"
    case tagalog = "Tagalog"
    case tagbanwa = "Tagbanwa"
    case taiLe = "Tai_Le"
    case taiTham = "Tai_Tham"
    case taiViet = "Tai_Viet"
    case takri = "Takri"
    case tamil = "Tamil"
    case tangsa = "Tangsa"
    case tangut = "Tangut"
    case telugu = "Telugu"
    case thaana = "Thaana"
    case thai = "Thai"
    case tibetan = "Tibetan"
    case tifinagh = "Tifinagh"
    case tirhuta = "Tirhuta"
    case toto = "Toto"
    case ugaritic = "Ugaritic"
    case unknown = "Unknown"
    case vai = "Vai"
    case vithkuqi = "Vithkuqi"
    case wancho = "Wancho"
    case warangCiti = "Warang_Citi"
    case yezidi = "Yezidi"
    case yi = "Yi"
    case zanabazarSquare = "Zanabazar_Square"
  }

  /// POSIX character properties not already covered by general categories or
  /// binary properties.
  public enum POSIXProperty: String, Hashable {
    case alnum = "alnum"
    case blank = "blank"
    case graph = "graph"
    case print = "print"
    case word = "word"
    case xdigit = "xdigit"
    // As per http://www.unicode.org/reports/tr18/#Compatibility_Properties,
    // [:alpha:], [:lower:], [:upper:], and [:space:] are covered by binary
    // properties. [:punct:], [:digit:], and [:cntrl:] are covered by general
    // categories. [:ascii:] is covered by CharacterProperty.Kind.ascii.
    // These may have different semantics depending on matching mode, but that
    // should be left up to the matching engine.
  }

  /// Unicode.GeneralCategory + cases for "meta categories" such as "L", which
  /// encompasses Lu | Ll | Lt | Lm | Lo.
  public enum ExtendedGeneralCategory: String, Hashable {
    case other = "C"
    case control = "Cc"
    case format = "Cf"
    case unassigned = "Cn"
    case privateUse = "Co"
    case surrogate = "Cs"

    case letter = "L"
    case casedLetter = "Lc"
    case lowercaseLetter = "Ll"
    case modifierLetter = "Lm"
    case otherLetter = "Lo"
    case titlecaseLetter = "Lt"
    case uppercaseLetter = "Lu"

    case mark = "M"
    case spacingMark = "Mc"
    case enclosingMark = "Me"
    case nonspacingMark = "Mn"

    case number = "N"
    case decimalNumber = "Nd"
    case letterNumber = "Nl"
    case otherNumber = "No"

    case punctuation = "P"
    case connectorPunctuation = "Pc"
    case dashPunctuation = "Pd"
    case closePunctuation = "Pe"
    case finalPunctuation = "Pf"
    case initialPunctuation = "Pi"
    case otherPunctuation = "Po"
    case openPunctuation = "Ps"

    case symbol = "S"
    case currencySymbol = "Sc"
    case modifierSymbol = "Sk"
    case mathSymbol = "Sm"
    case otherSymbol = "So"

    case separator = "Z"
    case lineSeparator = "Zl"
    case paragraphSeparator = "Zp"
    case spaceSeparator = "Zs"
  }

  // A list of unicode properties that can either be true or false.
  // https://www.unicode.org/Public/UCD/latest/ucd/PropertyAliases.txt
  public enum BinaryProperty: String, Hashable {
    case asciiHexDigit = "ASCII_Hex_Digit"
    case alphabetic = "Alphabetic"
    case bidiControl = "Bidi_Control"
    case bidiMirrored = "Bidi_Mirrored"
    case cased = "Cased"
    case compositionExclusion = "Composition_Exclusion"
    case caseIgnorable = "Case_Ignorable"
    case changesWhenCasefolded = "Changes_When_Casefolded"
    case changesWhenCasemapped = "Changes_When_Casemapped"
    case changesWhenNFKCCasefolded = "Changes_When_NFKC_Casefolded"
    case changesWhenLowercased = "Changes_When_Lowercased"
    case changesWhenTitlecased = "Changes_When_Titlecased"
    case changesWhenUppercased = "Changes_When_Uppercased"
    case dash = "Dash"
    case deprecated = "Deprecated"
    case defaultIgnorableCodePoint = "Default_Ignorable_Code_Point"
    case diacratic = "Diacritic"
    case emojiModifierBase = "Emoji_Modifier_Base"
    case emojiComponent = "Emoji_Component"
    case emojiModifier = "Emoji_Modifier"
    case emoji = "Emoji"
    case emojiPresentation = "Emoji_Presentation"
    case extender = "Extender"
    case extendedPictographic = "Extended_Pictographic"
    case fullCompositionExclusion = "Full_Composition_Exclusion"
    case graphemeBase = "Grapheme_Base"
    case graphemeExtended = "Grapheme_Extend"
    case graphemeLink = "Grapheme_Link"
    case hexDigit = "Hex_Digit"
    case hyphen = "Hyphen"
    case idContinue = "ID_Continue"
    case ideographic = "Ideographic"
    case idStart = "ID_Start"
    case idsBinaryOperator = "IDS_Binary_Operator"
    case idsTrinaryOperator = "IDS_Trinary_Operator"
    case joinControl = "Join_Control"
    case logicalOrderException = "Logical_Order_Exception"
    case lowercase = "Lowercase"
    case math = "Math"
    case noncharacterCodePoint = "Noncharacter_Code_Point"
    case otherAlphabetic = "Other_Alphabetic"
    case otherDefaultIgnorableCodePoint = "Other_Default_Ignorable_Code_Point"
    case otherGraphemeExtended = "Other_Grapheme_Extend"
    case otherIDContinue = "Other_ID_Continue"
    case otherIDStart = "Other_ID_Start"
    case otherLowercase = "Other_Lowercase"
    case otherMath = "Other_Math"
    case otherUppercase = "Other_Uppercase"
    case patternSyntax = "Pattern_Syntax"
    case patternWhitespace = "Pattern_White_Space"
    case prependedConcatenationMark = "Prepended_Concatenation_Mark"
    case quotationMark = "Quotation_Mark"
    case radical = "Radical"
    case regionalIndicator = "Regional_Indicator"
    case softDotted = "Soft_Dotted"
    case sentenceTerminal = "Sentence_Terminal"
    case terminalPunctuation = "Terminal_Punctuation"
    case unifiedIdiograph = "Unified_Ideograph"
    case uppercase = "Uppercase"
    case variationSelector = "Variation_Selector"
    case whitespace = "White_Space"
    case xidContinue = "XID_Continue"
    case xidStart = "XID_Start"
    case expandsOnNFC = "Expands_On_NFC"
    case expandsOnNFD = "Expands_On_NFD"
    case expandsOnNFKC = "Expands_On_NFKC"
    case expandsOnNFKD = "Expands_On_NFKD"
  }
}

// Oniguruma properties that are not covered by the above.
public enum OnigurumaSpecialProperty: String, Hashable {
  case inBasicLatin = "In_Basic_Latin"
  case inLatin1Supplement = "In_Latin_1_Supplement"
  case inLatinExtendedA = "In_Latin_Extended_A"
  case inLatinExtendedB = "In_Latin_Extended_B"
  case inIPAExtensions = "In_IPA_Extensions"
  case inSpacingModifierLetters = "In_Spacing_Modifier_Letters"
  case inCombiningDiacriticalMarks = "In_Combining_Diacritical_Marks"
  case inGreekAndCoptic = "In_Greek_and_Coptic"
  case inCyrillic = "In_Cyrillic"
  case inCyrillicSupplement = "In_Cyrillic_Supplement"
  case inArmenian = "In_Armenian"
  case inHebrew = "In_Hebrew"
  case inArabic = "In_Arabic"
  case inSyriac = "In_Syriac"
  case inArabicSupplement = "In_Arabic_Supplement"
  case inThaana = "In_Thaana"
  case inNKo = "In_NKo"
  case inSamaritan = "In_Samaritan"
  case inMandaic = "In_Mandaic"
  case inSyriacSupplement = "In_Syriac_Supplement"
  case inArabicExtendedB = "In_Arabic_Extended_B"
  case inArabicExtendedA = "In_Arabic_Extended_A"
  case inDevanagari = "In_Devanagari"
  case inBengali = "In_Bengali"
  case inGurmukhi = "In_Gurmukhi"
  case inGujarati = "In_Gujarati"
  case inOriya = "In_Oriya"
  case inTamil = "In_Tamil"
  case inTelugu = "In_Telugu"
  case inKannada = "In_Kannada"
  case inMalayalam = "In_Malayalam"
  case inSinhala = "In_Sinhala"
  case inThai = "In_Thai"
  case inLao = "In_Lao"
  case inTibetan = "In_Tibetan"
  case inMyanmar = "In_Myanmar"
  case inGeorgian = "In_Georgian"
  case inHangulJamo = "In_Hangul_Jamo"
  case inEthiopic = "In_Ethiopic"
  case inEthiopicSupplement = "In_Ethiopic_Supplement"
  case inCherokee = "In_Cherokee"
  case inUnifiedCanadianAboriginalSyllabics = "In_Unified_Canadian_Aboriginal_Syllabics"
  case inOgham = "In_Ogham"
  case inRunic = "In_Runic"
  case inTagalog = "In_Tagalog"
  case inHanunoo = "In_Hanunoo"
  case inBuhid = "In_Buhid"
  case inTagbanwa = "In_Tagbanwa"
  case inKhmer = "In_Khmer"
  case inMongolian = "In_Mongolian"
  case inUnifiedCanadianAboriginalSyllabicsExtended = "In_Unified_Canadian_Aboriginal_Syllabics_Extended"
  case inLimbu = "In_Limbu"
  case inTaiLe = "In_Tai_Le"
  case inNewTaiLue = "In_New_Tai_Lue"
  case inKhmerSymbols = "In_Khmer_Symbols"
  case inBuginese = "In_Buginese"
  case inTaiTham = "In_Tai_Tham"
  case inCombiningDiacriticalMarksExtended = "In_Combining_Diacritical_Marks_Extended"
  case inBalinese = "In_Balinese"
  case inSundanese = "In_Sundanese"
  case inBatak = "In_Batak"
  case inLepcha = "In_Lepcha"
  case inOlChiki = "In_Ol_Chiki"
  case inCyrillicExtendedC = "In_Cyrillic_Extended_C"
  case inGeorgianExtended = "In_Georgian_Extended"
  case inSundaneseSupplement = "In_Sundanese_Supplement"
  case inVedicExtensions = "In_Vedic_Extensions"
  case inPhoneticExtensions = "In_Phonetic_Extensions"
  case inPhoneticExtensions_Supplement = "In_Phonetic_Extensions_Supplement"
  case inCombiningDiacriticalMarksSupplement = "In_Combining_Diacritical_Marks_Supplement"
  case inLatinExtendedAdditional = "In_Latin_Extended_Additional"
  case inGreekExtended = "In_Greek_Extended"
  case inGeneralPunctuation = "In_General_Punctuation"
  case inSuperscriptsandSubscripts = "In_Superscripts_and_Subscripts"
  case inCurrencySymbols = "In_Currency_Symbols"
  case inCombiningDiacriticalMarksforSymbols = "In_Combining_Diacritical_Marks_for_Symbols"
  case inLetterlikeSymbols = "In_Letterlike_Symbols"
  case inNumberForms = "In_Number_Forms"
  case inArrows = "In_Arrows"
  case inMathematicalOperators = "In_Mathematical_Operators"
  case inMiscellaneousTechnical = "In_Miscellaneous_Technical"
  case inControlPictures = "In_Control_Pictures"
  case inOpticalCharacterRecognition = "In_Optical_Character_Recognition"
  case inEnclosedAlphanumerics = "In_Enclosed_Alphanumerics"
  case inBoxDrawing = "In_Box_Drawing"
  case inBlockElements = "In_Block_Elements"
  case inGeometricShapes = "In_Geometric_Shapes"
  case inMiscellaneousSymbols = "In_Miscellaneous_Symbols"
  case inDingbats = "In_Dingbats"
  case inMiscellaneousMathematicalSymbolsA = "In_Miscellaneous_Mathematical_Symbols_A"
  case inSupplementalArrowsA = "In_Supplemental_Arrows_A"
  case inBraillePatterns = "In_Braille_Patterns"
  case inSupplementalArrowsB = "In_Supplemental_Arrows_B"
  case inMiscellaneousMathematicalSymbolsB = "In_Miscellaneous_Mathematical_Symbols_B"
  case inSupplementalMathematicalOperators = "In_Supplemental_Mathematical_Operators"
  case inMiscellaneousSymbolsAndArrows = "In_Miscellaneous_Symbols_and_Arrows"
  case inGlagolitic = "In_Glagolitic"
  case inLatinExtendedC = "In_Latin_Extended_C"
  case inCoptic = "In_Coptic"
  case inGeorgianSupplement = "In_Georgian_Supplement"
  case inTifinagh = "In_Tifinagh"
  case inEthiopicExtended = "In_Ethiopic_Extended"
  case inCyrillicExtendedA = "In_Cyrillic_Extended_A"
  case inSupplementalPunctuation = "In_Supplemental_Punctuation"
  case inCJKRadicalsSupplement = "In_CJK_Radicals_Supplement"
  case inKangxiRadicals = "In_Kangxi_Radicals"
  case inIdeographicDescriptionCharacters = "In_Ideographic_Description_Characters"
  case inCJKSymbolsAndPunctuation = "In_CJK_Symbols_and_Punctuation"
  case inHiragana = "In_Hiragana"
  case inKatakana = "In_Katakana"
  case inBopomofo = "In_Bopomofo"
  case inHangulCompatibilityJamo = "In_Hangul_Compatibility_Jamo"
  case inKanbun = "In_Kanbun"
  case inBopomofoExtended = "In_Bopomofo_Extended"
  case inCJKStrokes = "In_CJK_Strokes"
  case inKatakanaPhoneticExtensions = "In_Katakana_Phonetic_Extensions"
  case inEnclosedCJKLettersAndMonths = "In_Enclosed_CJK_Letters_and_Months"
  case inCJKCompatibility = "In_CJK_Compatibility"
  case inCJKUnifiedIdeographsExtensionA = "In_CJK_Unified_Ideographs_Extension_A"
  case inYijingHexagramSymbols = "In_Yijing_Hexagram_Symbols"
  case inCJKUnifiedIdeographs = "In_CJK_Unified_Ideographs"
  case inYiSyllables = "In_Yi_Syllables"
  case inYiRadicals = "In_Yi_Radicals"
  case inLisu = "In_Lisu"
  case inVai = "In_Vai"
  case inCyrillicExtendedB = "In_Cyrillic_Extended_B"
  case inBamum = "In_Bamum"
  case inModifierToneLetters = "In_Modifier_Tone_Letters"
  case inLatinExtendedD = "In_Latin_Extended_D"
  case inSylotiNagri = "In_Syloti_Nagri"
  case inCommonIndicNumberForms = "In_Common_Indic_Number_Forms"
  case inPhagsPA = "In_Phags_pa"
  case inSaurashtra = "In_Saurashtra"
  case inDevanagariExtended = "In_Devanagari_Extended"
  case inKayahLi = "In_Kayah_Li"
  case inRejang = "In_Rejang"
  case inHangulJamoExtendedA = "In_Hangul_Jamo_Extended_A"
  case inJavanese = "In_Javanese"
  case inMyanmarExtendedB = "In_Myanmar_Extended_B"
  case inCham = "In_Cham"
  case inMyanmarExtendedA = "In_Myanmar_Extended_A"
  case inTaiViet = "In_Tai_Viet"
  case inMeeteiMayekExtensions = "In_Meetei_Mayek_Extensions"
  case inEthiopicExtendedA = "In_Ethiopic_Extended_A"
  case inLatinExtendedE = "In_Latin_Extended_E"
  case inCherokeeSupplement = "In_Cherokee_Supplement"
  case inMeeteiMayek = "In_Meetei_Mayek"
  case inHangulSyllables = "In_Hangul_Syllables"
  case inHangulJamoExtendedB = "In_Hangul_Jamo_Extended_B"
  case inHighSurrogates = "In_High_Surrogates"
  case inHighPrivateUseSurrogates = "In_High_Private_Use_Surrogates"
  case inLowSurrogates = "In_Low_Surrogates"
  case inPrivateUseArea = "In_Private_Use_Area"
  case inCJKCompatibilityIdeographs = "In_CJK_Compatibility_Ideographs"
  case inAlphabeticPresentationForms = "In_Alphabetic_Presentation_Forms"
  case inArabicPresentationFormsA = "In_Arabic_Presentation_Forms_A"
  case inVariationSelectors = "In_Variation_Selectors"
  case inVerticalForms = "In_Vertical_Forms"
  case inCombiningHalfMarks = "In_Combining_Half_Marks"
  case inCJKCompatibilityForms = "In_CJK_Compatibility_Forms"
  case inSmallFormVariants = "In_Small_Form_Variants"
  case inArabicPresentationFormsB = "In_Arabic_Presentation_Forms_B"
  case inHalfwidthAndFullwidthForms = "In_Halfwidth_and_Fullwidth_Forms"
  case inSpecials = "In_Specials"
  case inLinearBSyllabary = "In_Linear_B_Syllabary"
  case inLinearBIdeograms = "In_Linear_B_Ideograms"
  case inAegeanNumbers = "In_Aegean_Numbers"
  case inAncientGreekNumbers = "In_Ancient_Greek_Numbers"
  case inAncientSymbols = "In_Ancient_Symbols"
  case inPhaistosDisc = "In_Phaistos_Disc"
  case inLycian = "In_Lycian"
  case inCarian = "In_Carian"
  case inCopticEpactNumbers = "In_Coptic_Epact_Numbers"
  case inOldItalic = "In_Old_Italic"
  case inGothic = "In_Gothic"
  case inOldPermic = "In_Old_Permic"
  case inUgaritic = "In_Ugaritic"
  case inOldPersian = "In_Old_Persian"
  case inDeseret = "In_Deseret"
  case inShavian = "In_Shavian"
  case inOsmanya = "In_Osmanya"
  case inOsage = "In_Osage"
  case inElbasan = "In_Elbasan"
  case inCaucasianAlbanian = "In_Caucasian_Albanian"
  case inVithkuqi = "In_Vithkuqi"
  case inLinearA = "In_Linear_A"
  case inLatinExtendedF = "In_Latin_Extended_F"
  case inCypriotSyllabary = "In_Cypriot_Syllabary"
  case inImperialAramaic = "In_Imperial_Aramaic"
  case inPalmyrene = "In_Palmyrene"
  case inNabataean = "In_Nabataean"
  case inHatran = "In_Hatran"
  case inPhoenician = "In_Phoenician"
  case inLydian = "In_Lydian"
  case inMeroiticHieroglyphs = "In_Meroitic_Hieroglyphs"
  case inMeroiticCursive = "In_Meroitic_Cursive"
  case inKharoshthi = "In_Kharoshthi"
  case inOldSouthArabian = "In_Old_South_Arabian"
  case inOldNorthArabian = "In_Old_North_Arabian"
  case inManichaean = "In_Manichaean"
  case inAvestan = "In_Avestan"
  case inInscriptionalParthian = "In_Inscriptional_Parthian"
  case inInscriptionalPahlavi = "In_Inscriptional_Pahlavi"
  case inPsalterPahlavi = "In_Psalter_Pahlavi"
  case inOldTurkic = "In_Old_Turkic"
  case inOldHungarian = "In_Old_Hungarian"
  case inHanifiRohingya = "In_Hanifi_Rohingya"
  case inRumiNumeralSymbols = "In_Rumi_Numeral_Symbols"
  case inYezidi = "In_Yezidi"
  case inOldSogdian = "In_Old_Sogdian"
  case inSogdian = "In_Sogdian"
  case inOldUyghur = "In_Old_Uyghur"
  case inChorasmian = "In_Chorasmian"
  case inElymaic = "In_Elymaic"
  case inBrahmi = "In_Brahmi"
  case inKaithi = "In_Kaithi"
  case inSoraSompeng = "In_Sora_Sompeng"
  case inChakma = "In_Chakma"
  case inMahajani = "In_Mahajani"
  case inSharada = "In_Sharada"
  case inSinhalaArchaicNumbers = "In_Sinhala_Archaic_Numbers"
  case inKhojki = "In_Khojki"
  case inMultani = "In_Multani"
  case inKhudawadi = "In_Khudawadi"
  case inGrantha = "In_Grantha"
  case inNewa = "In_Newa"
  case inTirhuta = "In_Tirhuta"
  case inSiddham = "In_Siddham"
  case inModi = "In_Modi"
  case inMongolianSupplement = "In_Mongolian_Supplement"
  case inTakri = "In_Takri"
  case inAhom = "In_Ahom"
  case inDogra = "In_Dogra"
  case inWarangCiti = "In_Warang_Citi"
  case inDivesAkuru = "In_Dives_Akuru"
  case inNandinagari = "In_Nandinagari"
  case inZanabazarSquare = "In_Zanabazar_Square"
  case inSoyombo = "In_Soyombo"
  case inUnifiedCanadianAboriginalSyllabicsExtendedA = "In_Unified_Canadian_Aboriginal_Syllabics_Extended_A"
  case inPauCinHau = "In_Pau_Cin_Hau"
  case inBhaiksuki = "In_Bhaiksuki"
  case inMarchen = "In_Marchen"
  case inMasaramGondi = "In_Masaram_Gondi"
  case inGunjalaGondi = "In_Gunjala_Gondi"
  case inMakasar = "In_Makasar"
  case inLisuSupplement = "In_Lisu_Supplement"
  case inTamilSupplement = "In_Tamil_Supplement"
  case inCuneiform = "In_Cuneiform"
  case inCuneiformNumbersandPunctuation = "In_Cuneiform_Numbers_and_Punctuation"
  case inEarlyDynasticCuneiform = "In_Early_Dynastic_Cuneiform"
  case inCyproMinoan = "In_Cypro_Minoan"
  case inEgyptianHieroglyphs = "In_Egyptian_Hieroglyphs"
  case inEgyptianHieroglyphFormatControls = "In_Egyptian_Hieroglyph_Format_Controls"
  case inAnatolianHieroglyphs = "In_Anatolian_Hieroglyphs"
  case inBamumSupplement = "In_Bamum_Supplement"
  case inMro = "In_Mro"
  case inTangsa = "In_Tangsa"
  case inBassaVah = "In_Bassa_Vah"
  case inPahawhHmong = "In_Pahawh_Hmong"
  case inMedefaidrin = "In_Medefaidrin"
  case inMiao = "In_Miao"
  case inIdeographicSymbolsAndPunctuation = "In_Ideographic_Symbols_and_Punctuation"
  case inTangut = "In_Tangut"
  case inTangutComponents = "In_Tangut_Components"
  case inKhitanSmallScript = "In_Khitan_Small_Script"
  case inTangutSupplement = "In_Tangut_Supplement"
  case inKanaExtendedB = "In_Kana_Extended_B"
  case inKanaSupplement = "In_Kana_Supplement"
  case inKanaExtendedA = "In_Kana_Extended_A"
  case inSmallKanaExtension = "In_Small_Kana_Extension"
  case inNushu = "In_Nushu"
  case inDuployan = "In_Duployan"
  case inShorthandFormatControls = "In_Shorthand_Format_Controls"
  case inZnamennyMusicalNotation = "In_Znamenny_Musical_Notation"
  case inByzantineMusicalSymbols = "In_Byzantine_Musical_Symbols"
  case inMusicalSymbols = "In_Musical_Symbols"
  case inAncientGreekMusicalNotation = "In_Ancient_Greek_Musical_Notation"
  case inMayanNumerals = "In_Mayan_Numerals"
  case inTaiXuanJingSymbols = "In_Tai_Xuan_Jing_Symbols"
  case inCountingRodNumerals = "In_Counting_Rod_Numerals"
  case inMathematicalAlphanumericSymbols = "In_Mathematical_Alphanumeric_Symbols"
  case inSuttonSignWriting = "In_Sutton_SignWriting"
  case inLatinExtendedG = "In_Latin_Extended_G"
  case inGlagoliticSupplement = "In_Glagolitic_Supplement"
  case inNyiakengPuachueHmong = "In_Nyiakeng_Puachue_Hmong"
  case inToto = "In_Toto"
  case inWancho = "In_Wancho"
  case inEthiopicExtendedB = "In_Ethiopic_Extended_B"
  case inMendeKikakui = "In_Mende_Kikakui"
  case inAdlam = "In_Adlam"
  case inIndicSiyaqNumbers = "In_Indic_Siyaq_Numbers"
  case inOttomanSiyaqNumbers = "In_Ottoman_Siyaq_Numbers"
  case inArabicMathematicalAlphabeticSymbols = "In_Arabic_Mathematical_Alphabetic_Symbols"
  case inMahjongTiles = "In_Mahjong_Tiles"
  case inDominoTiles = "In_Domino_Tiles"
  case inPlayingCards = "In_Playing_Cards"
  case inEnclosedAlphanumericSupplement = "In_Enclosed_Alphanumeric_Supplement"
  case inEnclosedIdeographicSupplement = "In_Enclosed_Ideographic_Supplement"
  case inMiscellaneousSymbolsandPictographs = "In_Miscellaneous_Symbols_and_Pictographs"
  case inEmoticons = "In_Emoticons"
  case inOrnamentalDingbats = "In_Ornamental_Dingbats"
  case inTransportandMapSymbols = "In_Transport_and_Map_Symbols"
  case inAlchemicalSymbols = "In_Alchemical_Symbols"
  case inGeometricShapesExtended = "In_Geometric_Shapes_Extended"
  case inSupplementalArrowsC = "In_Supplemental_Arrows_C"
  case inSupplementalSymbolsAndPictographs = "In_Supplemental_Symbols_and_Pictographs"
  case inChessSymbols = "In_Chess_Symbols"
  case inSymbolsAndPictographsExtendedA = "In_Symbols_and_Pictographs_Extended_A"
  case inSymbolsForLegacyComputing = "In_Symbols_for_Legacy_Computing"
  case inCJKUnifiedIdeographsExtensionB = "In_CJK_Unified_Ideographs_Extension_B"
  case inCJKUnifiedIdeographsExtensionC = "In_CJK_Unified_Ideographs_Extension_C"
  case inCJKUnifiedIdeographsExtensionD = "In_CJK_Unified_Ideographs_Extension_D"
  case inCJKUnifiedIdeographsExtensionE = "In_CJK_Unified_Ideographs_Extension_E"
  case inCJKUnifiedIdeographsExtensionF = "In_CJK_Unified_Ideographs_Extension_F"
  case inCJKCompatibilityIdeographsSupplement = "In_CJK_Compatibility_Ideographs_Supplement"
  case inCJKUnifiedIdeographsExtensionG = "In_CJK_Unified_Ideographs_Extension_G"
  case inTags = "In_Tags"
  case inVariationSelectorsSupplement = "In_Variation_Selectors_Supplement"
  case inSupplementaryPrivateUseAreaA = "In_Supplementary_Private_Use_Area_A"
  case inSupplementaryPrivateUseAreaB = "In_Supplementary_Private_Use_Area_B"
  case inNoBlock = "In_No_Block"
}
