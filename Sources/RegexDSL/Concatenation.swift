// BEGIN AUTO-GENERATED CONTENT


public struct Concatenate2_TT<T0: RegexProtocol, T1: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1>(
    _ x0: T0, _ x1: T1
  ) -> Concatenate2_TT<T0, T1> {
    Concatenate2_TT(x0, x1)
  }
}

public struct Concatenate2_TV<T0: RegexProtocol, T1: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1>(
    _ x0: T0, _ x1: T1
  ) -> Concatenate2_TV<T0, T1> {
    Concatenate2_TV(x0, x1)
  }
}

public struct Concatenate2_VT<T0: RegexProtocol, T1: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1>(
    _ x0: T0, _ x1: T1
  ) -> Concatenate2_VT<T0, T1> {
    Concatenate2_VT(x0, x1)
  }
}

public struct Concatenate2_VV<T0: RegexProtocol, T1: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1>(
    _ x0: T0, _ x1: T1
  ) -> Concatenate2_VV<T0, T1> {
    Concatenate2_VV(x0, x1)
  }
}



public struct Concatenate3_TTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_TTT<T0, T1, T2> {
    Concatenate3_TTT(x0, x1, x2)
  }
}

public struct Concatenate3_TTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_TTV<T0, T1, T2> {
    Concatenate3_TTV(x0, x1, x2)
  }
}

public struct Concatenate3_TVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_TVT<T0, T1, T2> {
    Concatenate3_TVT(x0, x1, x2)
  }
}

public struct Concatenate3_TVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_TVV<T0, T1, T2> {
    Concatenate3_TVV(x0, x1, x2)
  }
}

public struct Concatenate3_VTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_VTT<T0, T1, T2> {
    Concatenate3_VTT(x0, x1, x2)
  }
}

public struct Concatenate3_VTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_VTV<T0, T1, T2> {
    Concatenate3_VTV(x0, x1, x2)
  }
}

public struct Concatenate3_VVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_VVT<T0, T1, T2> {
    Concatenate3_VVT(x0, x1, x2)
  }
}

public struct Concatenate3_VVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2>(
    _ x0: T0, _ x1: T1, _ x2: T2
  ) -> Concatenate3_VVV<T0, T1, T2> {
    Concatenate3_VVV(x0, x1, x2)
  }
}



public struct Concatenate4_TTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TTTT<T0, T1, T2, T3> {
    Concatenate4_TTTT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TTTV<T0, T1, T2, T3> {
    Concatenate4_TTTV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TTVT<T0, T1, T2, T3> {
    Concatenate4_TTVT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TTVV<T0, T1, T2, T3> {
    Concatenate4_TTVV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TVTT<T0, T1, T2, T3> {
    Concatenate4_TVTT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TVTV<T0, T1, T2, T3> {
    Concatenate4_TVTV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TVVT<T0, T1, T2, T3> {
    Concatenate4_TVVT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_TVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_TVVV<T0, T1, T2, T3> {
    Concatenate4_TVVV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VTTT<T0, T1, T2, T3> {
    Concatenate4_VTTT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VTTV<T0, T1, T2, T3> {
    Concatenate4_VTTV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VTVT<T0, T1, T2, T3> {
    Concatenate4_VTVT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VTVV<T0, T1, T2, T3> {
    Concatenate4_VTVV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VVTT<T0, T1, T2, T3> {
    Concatenate4_VVTT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VVTV<T0, T1, T2, T3> {
    Concatenate4_VVTV(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VVVT<T0, T1, T2, T3> {
    Concatenate4_VVVT(x0, x1, x2, x3)
  }
}

public struct Concatenate4_VVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3
  ) -> Concatenate4_VVVV<T0, T1, T2, T3> {
    Concatenate4_VVVV(x0, x1, x2, x3)
  }
}



public struct Concatenate5_TTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTTTT<T0, T1, T2, T3, T4> {
    Concatenate5_TTTTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTTTV<T0, T1, T2, T3, T4> {
    Concatenate5_TTTTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTTVT<T0, T1, T2, T3, T4> {
    Concatenate5_TTTVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTTVV<T0, T1, T2, T3, T4> {
    Concatenate5_TTTVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTVTT<T0, T1, T2, T3, T4> {
    Concatenate5_TTVTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTVTV<T0, T1, T2, T3, T4> {
    Concatenate5_TTVTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTVVT<T0, T1, T2, T3, T4> {
    Concatenate5_TTVVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TTVVV<T0, T1, T2, T3, T4> {
    Concatenate5_TTVVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVTTT<T0, T1, T2, T3, T4> {
    Concatenate5_TVTTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVTTV<T0, T1, T2, T3, T4> {
    Concatenate5_TVTTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVTVT<T0, T1, T2, T3, T4> {
    Concatenate5_TVTVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVTVV<T0, T1, T2, T3, T4> {
    Concatenate5_TVTVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVVTT<T0, T1, T2, T3, T4> {
    Concatenate5_TVVTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVVTV<T0, T1, T2, T3, T4> {
    Concatenate5_TVVTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVVVT<T0, T1, T2, T3, T4> {
    Concatenate5_TVVVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_TVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_TVVVV<T0, T1, T2, T3, T4> {
    Concatenate5_TVVVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTTTT<T0, T1, T2, T3, T4> {
    Concatenate5_VTTTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTTTV<T0, T1, T2, T3, T4> {
    Concatenate5_VTTTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTTVT<T0, T1, T2, T3, T4> {
    Concatenate5_VTTVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTTVV<T0, T1, T2, T3, T4> {
    Concatenate5_VTTVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTVTT<T0, T1, T2, T3, T4> {
    Concatenate5_VTVTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTVTV<T0, T1, T2, T3, T4> {
    Concatenate5_VTVTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTVVT<T0, T1, T2, T3, T4> {
    Concatenate5_VTVVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VTVVV<T0, T1, T2, T3, T4> {
    Concatenate5_VTVVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVTTT<T0, T1, T2, T3, T4> {
    Concatenate5_VVTTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVTTV<T0, T1, T2, T3, T4> {
    Concatenate5_VVTTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVTVT<T0, T1, T2, T3, T4> {
    Concatenate5_VVTVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVTVV<T0, T1, T2, T3, T4> {
    Concatenate5_VVTVV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVVTT<T0, T1, T2, T3, T4> {
    Concatenate5_VVVTT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVVTV<T0, T1, T2, T3, T4> {
    Concatenate5_VVVTV(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVVVT<T0, T1, T2, T3, T4> {
    Concatenate5_VVVVT(x0, x1, x2, x3, x4)
  }
}

public struct Concatenate5_VVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4
  ) -> Concatenate5_VVVVV<T0, T1, T2, T3, T4> {
    Concatenate5_VVVVV(x0, x1, x2, x3, x4)
  }
}



public struct Concatenate6_TTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTTVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTTVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TTVVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TTVVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVTVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVTVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_TVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_TVVVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_TVVVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTTVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTTVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VTVVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VTVVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVTVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVTVVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVTTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVTTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVTTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVTTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVTVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVTVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVTVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVTVV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVVTT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVVTT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVVTV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVVTV(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVVVT<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVVVT(x0, x1, x2, x3, x4, x5)
  }
}

public struct Concatenate6_VVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5
  ) -> Concatenate6_VVVVVV<T0, T1, T2, T3, T4, T5> {
    Concatenate6_VVVVVV(x0, x1, x2, x3, x4, x5)
  }
}



public struct Concatenate7_TTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTTVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTTVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TTVVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TTVVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVTVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVTVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_TVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_TVVVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_TVVVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTTVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTTVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VTVVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VTVVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVTVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVTVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVTVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVTVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVTTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVTTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVTTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVTTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVTVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVTVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVTVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVTVV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVVTT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVVTT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVVTV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVVTV(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVVVT<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVVVT(x0, x1, x2, x3, x4, x5, x6)
  }
}

public struct Concatenate7_VVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6
  ) -> Concatenate7_VVVVVVV<T0, T1, T2, T3, T4, T5, T6> {
    Concatenate7_VVVVVVV(x0, x1, x2, x3, x4, x5, x6)
  }
}



public struct Concatenate8_TTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_TVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T7.MatchValue)
  public typealias CaptureValue = (T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_TVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_TVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}

public struct Concatenate8_VVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7
  ) -> Concatenate8_VVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7> {
    Concatenate8_VVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7)
  }
}



public struct Concatenate9_TTTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TTVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T7.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T7.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TTVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TTVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T8.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_TVVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T8.MatchValue)
  public typealias CaptureValue = (T8.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_TVVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_TVVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T7.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VTVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T7.MatchValue)
  public typealias CaptureValue = (T7.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VTVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VTVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T6.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVTVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T6.MatchValue)
  public typealias CaptureValue = (T6.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVTVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVTVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T5.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVTVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T5.MatchValue)
  public typealias CaptureValue = (T5.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVTVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVTVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T4.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVTVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T4.MatchValue)
  public typealias CaptureValue = (T4.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVTVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVTVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T3.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVTVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T3.MatchValue)
  public typealias CaptureValue = (T3.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVTVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVTVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVTTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVTTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVTTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVTTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVTTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVTTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVTVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T2.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVTVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVTVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVTVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T2.MatchValue)
  public typealias CaptureValue = (T2.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVTVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVTVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVVTT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue, T1.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue, T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVVTT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVVTT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVVTV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T1.MatchValue)
  public typealias CaptureValue = (T1.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVVTV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVVTV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVVVT<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = (T0.MatchValue)
  public typealias CaptureValue = (T0.CaptureValue)
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVVVT<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVVVT(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}

public struct Concatenate9_VVVVVVVVV<T0: RegexProtocol, T1: RegexProtocol, T2: RegexProtocol, T3: RegexProtocol, T4: RegexProtocol, T5: RegexProtocol, T6: RegexProtocol, T7: RegexProtocol, T8: RegexProtocol>: RegexProtocol where T0.CaptureValue: EmptyProtocol, T1.CaptureValue: EmptyProtocol, T2.CaptureValue: EmptyProtocol, T3.CaptureValue: EmptyProtocol, T4.CaptureValue: EmptyProtocol, T5.CaptureValue: EmptyProtocol, T6.CaptureValue: EmptyProtocol, T7.CaptureValue: EmptyProtocol, T8.CaptureValue: EmptyProtocol {
  public typealias MatchValue = Empty
  public typealias CaptureValue = Empty
  public let regex: Regex<CaptureValue>
  init(_ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8) {
    regex = .init(ast: .concatenation([x0.regex.ast, x1.regex.ast, x2.regex.ast, x3.regex.ast, x4.regex.ast, x5.regex.ast, x6.regex.ast, x7.regex.ast, x8.regex.ast]))
  }
}

extension RegexBuilder {
  public static func buildBlock<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
    _ x0: T0, _ x1: T1, _ x2: T2, _ x3: T3, _ x4: T4, _ x5: T5, _ x6: T6, _ x7: T7, _ x8: T8
  ) -> Concatenate9_VVVVVVVVV<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
    Concatenate9_VVVVVVVVV(x0, x1, x2, x3, x4, x5, x6, x7, x8)
  }
}



// END AUTO-GENERATED CONTENT